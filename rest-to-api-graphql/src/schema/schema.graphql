type Query {
    seasonsList: [Sessions!]!
    carData(
        driver_number: Int
        session_key: Int
        meeting_key: Int
        speed: String
        date: String
        rpm: String
        throttle: String
        brake: Int
        drs: Int
        n_gear: Int
        # Parámetros de paginación
        limit: Int
        offset: Int
    ): CarDataResponse!
    
    drivers(
        driver_number: Int
        session_key: Int
        meeting_key: Int
        country_code: String
        team_name: String
        name_acronym: String
    ): [Driver!]!
    
    intervals(
        driver_number: Int
        session_key: Int
        meeting_key: Int
        date: String
        interval: String
        gap_to_leader: String
    ): [Interval!]!
    
    laps(
        driver_number: Int
        session_key: Int
        meeting_key: Int
        lap_number: Int
        date_start: String
        lap_duration: String
        is_pit_out_lap: Boolean
    ): [Lap!]!
    
    location(
        driver_number: Int
        session_key: Int
        meeting_key: Int
        date: String
        x: String
        y: String
        z: String
    ): [Location!]!
}

type Sessions {
    meeting_key: Int!
    session_key: Int!
    location: String!
    date_start: String!
    date_end: String!
    session_type: String!
    session_name: String!
    country_key: Int!
    country_code: String!
    country_name: String!
    circuit_key: Int!
    circuit_short_name: String!
    gmt_offset: String!
    year: Int!
}

type CarData {
    brake: Int!
    date: String!
    driver_number: Int!
    drs: Int!
    meeting_key: Int!
    n_gear: Int!
    rpm: Int!
    session_key: Int!
    speed: Int!
    throttle: Int!
}

# Tipos para paginación
type CarDataResponse {
    data: [CarData!]!
    pagination: PaginationInfo!
}

type PaginationInfo {
    total: Int!
    limit: Int!
    offset: Int!
    hasNext: Boolean!
    hasPrevious: Boolean!
}

type Driver {
    broadcast_name: String
    country_code: String
    driver_number: Int
    first_name: String
    full_name: String
    headshot_url: String
    last_name: String
    meeting_key: Int
    name_acronym: String
    session_key: Int
    team_colour: String
    team_name: String
}

type Interval {
    date: String
    driver_number: Int
    gap_to_leader: Float
    interval: Float
    meeting_key: Int
    session_key: Int
}

type Lap {
    date_start: String
    driver_number: Int
    duration_sector_1: Float
    duration_sector_2: Float
    duration_sector_3: Float
    i1_speed: Int
    i2_speed: Int
    is_pit_out_lap: Boolean
    lap_duration: Float
    lap_number: Int
    meeting_key: Int
    segments_sector_1: [Int]
    segments_sector_2: [Int]
    segments_sector_3: [Int]
    session_key: Int
    st_speed: Int
}

type Location {
    date: String
    driver_number: Int
    meeting_key: Int
    session_key: Int
    x: Int
    y: Int
    z: Int
}


